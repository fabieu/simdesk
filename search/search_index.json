{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Modern server leaderboard and various services for sim racing organizers. </p> <p> Documentation \u2022      Demo </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Leaderboard for lap records (Assetto Corsa Competizione)</li> <li>Detailed session overview (Assetto Corsa Competizione)</li> <li>Balance of Performance Management (Assetto Corsa Competizione)</li> <li>Balance of Performance Editor (Assetto Corsa Competizione)</li> <li>Entrylist Editor with validation (Assetto Corsa Competizione)</li> <li>World map with real-time weather (Assetto Corsa Competizione)</li> <li>Discord OAuth2 login and bot integration</li> <li>Theme customization with multiple presets</li> <li>Responsive design for mobile and desktop</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Docker \ud83d\udc33</p> <pre><code>docker run -d -p 8080:8080 -v \"simdesk-data:/app/data\" ghcr.io/fabieu/simdesk:latest\n</code></pre> <p>Docker Compose \ud83d\udc33</p> <pre><code>services:\n  app:\n    image: ghcr.io/fabieu/simdesk:latest\n    volumes:\n      - simdesk-data:/app/data\n    ports:\n      - \"8080:8080\"\n    restart: unless-stopped\n</code></pre> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>For an extensive overview of the configuration options, please refer to the official documentation:</p>"},{"location":"#support-level","title":"Support Level","text":"<p>Active</p> <p>SimDesk is being actively worked on, and we expect work to continue in the foreseeable future. Bug reports, feature requests, questions, and pull requests are welcome.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated.</p> <p>Please read CONTRIBUTING for details on the process for submitting pull requests to us, and CREDITS for a listing of maintainers of, contributors to, and dependencies used by SimDesk.</p>"},{"location":"#changelog-releases","title":"Changelog &amp; Releases","text":"<p>This repository keeps a changelog using GitHub's releases functionality.</p> <p>Releases are based on Semantic Versioning, and use the format of <code>MAJOR.MINOR.PATCH</code>. In short, the version will be incremented based on the following:</p> <ul> <li><code>MAJOR</code>: Incompatible or major changes.</li> <li><code>MINOR</code>: Backwards-compatible new features and enhancements.</li> <li><code>PATCH</code>: Backwards-compatible bugfixes and package updates.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the Apache License 2.0.</p>"},{"location":"#credits","title":"Credits","text":"<p>For a full list of maintainers of, contributors to, and dependencies used by SimDesk, please refer to CREDITS.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>First, thank you for taking the time to contribute!</p> <p>The following is a set of guidelines for contributors as well as information and instructions around our maintenance process. The two are closely tied together in terms of how we all work together and set expectations, so while you may not need to know everything in here to submit an issue or pull request, it's best to keep them in the same document.</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to contribute","text":"<p>Contributing isn't just writing code - it's anything that improves the project. Here are some ways you can help:</p>"},{"location":"contributing/#reporting-bugs","title":"Reporting bugs","text":"<p>If you're running into an issue please take a look through existing issues and open a new one if needed. If you're able, include steps to reproduce, environment information, and screenshots/screencasts as relevant.</p>"},{"location":"contributing/#suggesting-enhancements","title":"Suggesting enhancements","text":"<p>New features and enhancements are also managed via issues.</p>"},{"location":"contributing/#pull-requests","title":"Pull requests","text":"<p>Pull requests represent a proposed solution to a specified problem. They should always reference an issue that describes the problem and contains discussion about the problem itself. Discussion on pull requests should be limited to the pull request itself, i.e. code review.</p>"},{"location":"credits/","title":"Credits","text":"<p>The following acknowledges the Maintainers for this repository, those who have contributed to this repository (via bug reports, code, design, ideas, project management, translation, testing, etc.), and any other references utilized.</p>"},{"location":"credits/#maintainers","title":"Maintainers","text":"<p>The following individuals are responsible for curating the list of issues, responding to pull requests, and ensuring regular releases happen.</p> <p>Fabian Eulitz (@fabieu)</p>"},{"location":"credits/#contributors","title":"Contributors","text":"<p>Thank you to all the people who have already contributed to this repository via bug reports, code, design, ideas, project management, translation, testing, etc.</p>"},{"location":"credits/#references","title":"References","text":"<p>The following software libraries and other references are utilized in the creation of this repository.</p> <p>choosealicense.com by GitHub</p> <p>Shields.io by badges and CC0 1.0 Universal</p> <p>Roboto Font by Christian Robertson and Apache License 2.0</p> <p>Font Awesome Free 6 by fontawesome and CC BY 4.0, SIL OFL 1.1, MIT License</p> <p>pure.css by pure-css and BSD License.</p> <p>pattern.css by bansal and MIT License</p> <p>Gradle by gradle and Apache License 2.0</p> <p>Eclipse Temurin by Eclipse Adoptium and Apache License 2.0</p> <p>Vaadin Flow by vaadin and Apache License 2.0</p> <p>Spring Boot by spring-projects and Apache License 2.0</p> <p>Spring Dependency Management Plugin by spring-gradle-plugins and Apache License 2.0</p> <p>MyBatis by mybatis and Apache License 2.0</p> <p>sqlite-jdbc by xerial and Apache License 2.0</p> <p>pgjdbc by The PostgreSQL Global Development Group and BSD 2-Clause \"Simplified\" License</p> <p>Flyway by Redgate and Apache License 2.0</p> <p>logzio-logback-appender by logz.io and Apache License 2.0</p> <p>commons-lang by Apache and Apache License 2.0</p> <p>commons-codec by Apache and Apache License 2.0</p> <p>commons-io by Apache and Apache License 2.0</p> <p>Discord4j by Discord4J and GNU Lesser General Public License v3.0</p> <p>opencsv by Andrew Rucker Jones and Apache License 2.0</p> <p>springdoc-openapi by Springdoc and Apache License 2.0</p> <p>webjars-locator-lite by webjars and MIT License</p> <p>Lombok by Project Lombok and MIT License</p> <p>JUnit 5 by JUnit Team and Eclipse Public License 2.0</p> <p>Testcontainers Java by Testcontainers and MIT License</p> <p>vaadin-maps-leaflet-flow by XDEV Software and Apache License 2.0</p> <p>ACC-Race-Control by Leonard Sch\u00fcngel and MIT License</p>"},{"location":"api/rest-api/","title":"REST API","text":"<p>SimDesk exposes a small REST API which is documented via OpenAPI. An automatically generated JSON specification is served from the running application at <code>/openapi</code>. You can open <code>/swagger-ui</code> for an interactive view of the endpoints.</p> <p>Below is a short overview of the available endpoints.</p>"},{"location":"api/rest-api/#endpoints","title":"Endpoints","text":""},{"location":"api/rest-api/#sessions","title":"Sessions","text":"Method Path Description <code>GET</code> <code>/api/v1/sessions</code> Retrieve all sessions within a time range. Optional query parameters can include lap data or filter by insert time. <code>GET</code> <code>/api/v1/sessions/{fileChecksum}</code> Retrieve a single session identified by its file checksum. Optional query parameter <code>withLaps</code> adds lap data."},{"location":"api/rest-api/#drivers","title":"Drivers","text":"Method Path Description <code>GET</code> <code>/api/v1/drivers/{driverId}/sessions</code> Get all sessions for a driver. Optional query parameters allow filtering by time range and including lap data."},{"location":"api/rest-api/#weather","title":"Weather","text":"Method Path Description <code>GET</code> <code>/api/v1/weather/current</code> Returns the current weather prediction for the specified track. <code>GET</code> <code>/api/v1/weather/prediction</code> Predicts weather settings for a given number of race hours. <p>All endpoints require an authenticated user with the <code>ADMIN</code> role. Some requests accept additional query parameters, see the OpenAPI specification for the complete schema.</p>"},{"location":"config/acc-bop/","title":"Balance of Performance","text":""},{"location":"config/acc-bop/#description","title":"Description","text":"<p>The <code>acc-bop</code> feature enables the Balance of Performance (BoP) Management features as well as the BoP Editor.</p> <p>The BoP Management feature provides a way to save and publish BoP definitions for all available tracks and cars in Assetto Corsa Competizione. You can also download and share the corresponding definitions.</p> <p>The standalone BoP Editor is used to create and manipulate Assetto Corsa Competizione <code>bop.json</code> files.</p> <p>View Demo: Balance of Performance - Editor</p> <p>Enable the Balance of Performance features by adding <code>acc-bop</code> to <code>SPRING_PROFILES_ACTIVE</code>.</p>"},{"location":"config/acc-bop/#management-feature","title":"Management Feature","text":"<p>The BoP definitions are publicly visible to all users. The management interface, which enables the creation and editing of BoP definitions, is currently only accessible to the admin user. A finer-grained access control is planned for the future.</p>"},{"location":"config/acc-entrylist/","title":"Entrylist","text":""},{"location":"config/acc-entrylist/#description","title":"Description","text":"<p>The <code>acc-entrylist</code> feature enables the Entrylist Editor to manipulate Assetto Corsa Competizione <code>entrylist.json</code> files and validate them for syntax errors and inconsistencies.</p> <p>View Demo: Entrylist Editor</p> <p>Enable the leaderboard feature by adding <code>acc-entrylist</code> to <code>SPRING_PROFILES_ACTIVE</code>.</p>"},{"location":"config/acc-entrylist/#entrylist-editor","title":"Entrylist Editor","text":""},{"location":"config/acc-entrylist/#import-results","title":"Import results","text":"<p>The Entrylist Editor allows you to update the grid positions based on result files from previous sessions. You can optionally define a grid start position, which will be used as the starting point for the actual grid positions. The car number (<code>raceNumber</code>) will be used to match the results with the entrylist entries, so make sure that the car numbers are identical.</p>"},{"location":"config/acc-entrylist/#load-custom-cars","title":"Load custom cars","text":"<p>Specify custom car definitions using an external file, ensuring they follow the required format (detailed below).  The custom car definitions will be used to override the <code>customCar</code> and <code>overrideCarModelForCustomCar</code> properties in the entrylist file.</p> <pre><code>[\n  {\n    \"carNumber\": 1,\n    \"customCar\": \"SIMDESK_1.json\",\n    \"overrideCarModelForCustomCar\": false\n  },\n  {\n    \"carNumber\": 2,\n    \"customCar\": \"SIMDESK_2.json\",\n    \"overrideCarModelForCustomCar\": true\n  }\n]\n</code></pre>"},{"location":"config/acc-entrylist/#reverse-grid-positions","title":"Reverse grid positions","text":"<p>When grid positions are defined, you can choose to reverse the grid positions. This is useful for reverse grid scenarios.</p>"},{"location":"config/acc-entrylist/#validation-rules","title":"Validation Rules","text":"<p>The following validation rules are available and can be toggled on or off:</p> <ul> <li>Invalid race numbers: Check if race numbers are valid, also check for duplicate race numbers.</li> <li>Invalid SteamIDs: Check if SteamIDs are present, also check for duplicate SteamIDs.</li> <li>Invalid grid positions: Check if grid positions are valid, also check for duplicate grid positions.</li> <li>Invalid ballast values: Check if ballast values are inside the allowed threshold.</li> <li>Invalid restrictor values: Check if restrictor values are inside the allowed threshold.</li> <li>Missing driver names: Check if firstName, lastName and shortName are set if <code>overrideDriverInfo</code> is set to <code>1</code> in   the entrylist file.</li> <li>Invalid driver categories: Check if driver categories are valid if <code>overrideDriverInfo</code> is set to <code>1</code> in the   entrylist file.</li> </ul>"},{"location":"config/acc-leaderboard/","title":"Leaderboard","text":""},{"location":"config/acc-leaderboard/#description","title":"Description","text":"<p>The <code>acc-leaderboard</code> feature enables processing of ACC result files to create a leaderboard for lap records as well as detailed session information.</p> <p>View Demo: Lap-Records, Sessions</p> <p>Enable the leaderboard feature by adding <code>acc-leaderboard</code> to <code>SPRING_PROFILES_ACTIVE</code>.</p>"},{"location":"config/acc-leaderboard/#docker-bind-mount","title":"Docker Bind Mount","text":"<p>The leaderboard feature requires a specific bind mount to read the local result files. When the application starts, all result files are scanned in the mounted folder recursively. Then a file watcher takes over to monitor the folder for file creations or changes recursively. The application ensures that only valid results files are being processed and that no duplicates are being created. The default path inside the docker container, which needs to be mounted, is <code>/app/results</code>.</p> <p>For more information about bind mounts, please refer to the Docker documentation.</p> <p>Examples:</p> <p>Single result folder:</p> <pre><code># compose.yaml (Docker Compose)\nservices:\n  app:\n    image: ghcr.io/fabieu/simdesk:latest\n    environment:\n      - SPRING_PROFILES_ACTIVE=acc-leaderboard\n    volumes:\n      - ./results:/app/results\n    ...\n</code></pre> <p>Multiple result folders:</p> <pre><code># compose.yaml (Docker Compose)\nservices:\n  app:\n    image: ghcr.io/fabieu/simdesk:latest\n    environment:\n      - SPRING_PROFILES_ACTIVE=acc-leaderboard\n    volumes:\n      - ./results/1:/app/results/1\n      - ./results/2:/app/results/2\n      - ./results/3:/app/results/3\n    ...\n</code></pre>"},{"location":"config/acc-leaderboard/#environment-variables","title":"Environment Variables","text":"<p><code>SIMDESK_ACC_RESULTS_SCAN_INTERVAL</code></p> <p>optional, default=1m</p> <p>Overrides the default scan interval for the results folder. The following methods can be used for defining the interval:</p> <ul> <li>A regular long representation using milliseconds</li> <li>The standard ISO-8601 format used by <code>java.time.Duration</code></li> <li>A more readable format where the value and the unit are coupled (e.g. 10s means 10 seconds)</li> </ul> <p><code>SIMDESK_ACC_RESULTS_EXCLUDE_PATTERN</code></p> <p>optional, default=</p> <p>Define a regex pattern to ignore certain server names, which can be useful if you want to exclude certain servers from the leaderboard.</p> <p><code>SIMDESK_ACC_RESULTS_FOLDERS</code></p> <p>optional, default=/app/results</p> <p>Overrides the default results folders. When using Docker it is required to adjust the volume bind mount to the new path.</p>"},{"location":"config/acc-leaderboard/#local-development","title":"Local Development","text":"<p>The results folder can be overridden by setting the environment variable <code>SIMDESK_ACC_RESULTS_FOLDERS</code>.</p>"},{"location":"config/auth/","title":"Authentication","text":""},{"location":"config/auth/#username-and-password","title":"Username and Password","text":"<p>The username and password for the admin user can be set via environment variables. If no password is set, a random password will be generated and printed to the console every time the application starts.</p>"},{"location":"config/auth/#environment-variables","title":"Environment Variables","text":"<p><code>SIMDESK_ADMIN_USERNAME</code></p> <p>optional, default=admin</p> <p>Username for the admin user.</p> <p><code>SIMDESK_ADMIN_PASSWORD</code></p> <p>optional</p> <p>Password for the admin user. If not set, a random password will be generated every time the application starts.</p>"},{"location":"config/discord/","title":"Discord Integration","text":""},{"location":"config/discord/#description","title":"Description","text":"<p>Enable the leaderboard feature by adding <code>discord</code> to <code>SPRING_PROFILES_ACTIVE</code>.</p>"},{"location":"config/discord/#environment-variables","title":"Environment Variables","text":""},{"location":"config/discord/#simdesk_discord_client_id","title":"<code>SIMDESK_DISCORD_CLIENT_ID</code>","text":"<p>required</p> <p>OAuth2 client id of the Discord Application.</p>"},{"location":"config/discord/#simdesk_discord_client_secret","title":"<code>SIMDESK_DISCORD_CLIENT_SECRET</code>","text":"<p>required</p> <p>OAuth2 client secret of the Discord Application.</p>"},{"location":"config/discord/#simdesk_discord_bot_token","title":"<code>SIMDESK_DISCORD_BOT_TOKEN</code>","text":"<p>required</p> <p>Bot Token of the Discord Application.</p>"},{"location":"config/discord/#simdesk_discord_guild_id","title":"<code>SIMDESK_DISCORD_GUILD_ID</code>","text":"<p>required</p> <p>Discord Server ID used for OAuth2 authentication rules and role mappings.</p>"},{"location":"config/discord/#discord-application","title":"Discord Application","text":"<p>To enable Discord OAuth2 login and Discord Bot integration, the <code>discord</code> profile must be active. You need to create a new Discord application in the Discord Developer Portal and setup the application with the following settings:</p> <p>Installation:</p> <ul> <li>Authorization Methods: \u2611 Guild Install</li> <li>Default Install Settings - Scopes:<code>applications.commands</code>, <code>bot</code></li> </ul> <p>OAuth2:</p> <ul> <li>Redirects:<ul> <li><code>http://localhost:8080/login/oauth2/code/discord</code> (for development)</li> <li><code>https://{your-domain}/login/oauth2/code/discord</code></li> </ul> </li> </ul> <p>Bot:</p> <ul> <li>Privileged Gateway Intents: \u2611 Server Members Intent</li> </ul>"},{"location":"config/discord/#creating-a-discord-application","title":"Creating a Discord Application","text":"<ol> <li>Sign in to the Discord Developer Portal and click New Application to create a project name.</li> <li>Copy the Application ID and Secret from the OAuth2 page. These values become <code>SIMDESK_DISCORD_CLIENT_ID</code> and <code>SIMDESK_DISCORD_CLIENT_SECRET</code>.</li> <li>Under Bot, click Add Bot and copy the generated Bot Token for the <code>SIMDESK_DISCORD_BOT_TOKEN</code> variable. Enable Server Members Intent in this section.</li> <li>On the OAuth2 \u2192 Redirects page, add the development URL <code>http://localhost:8080/login/oauth2/code/discord</code> and your production URL <code>https://{your-domain}/login/oauth2/code/discord</code>.</li> <li>Generate an invite link via OAuth2 \u2192 URL Generator with the scopes <code>applications.commands</code> and <code>bot</code>. Use it to add the bot to your server.</li> <li>To obtain your <code>SIMDESK_DISCORD_GUILD_ID</code>, enable Developer Mode in Discord (User Settings \u2192 Advanced), then right-click your server and choose Copy Server ID.</li> </ol>"},{"location":"config/map/","title":"Map","text":""},{"location":"config/map/#description","title":"Description","text":"<p>The <code>map</code> feature enables a world map with weather information for all available tracks in Assetto Corsa Competizione.</p> <p>View Demo: Map</p> <p>Enable the map feature by adding <code>map</code> to <code>SPRING_PROFILES_ACTIVE</code>.</p>"},{"location":"config/map/#environment-variables","title":"Environment Variables","text":"<p><code>SIMDESK_OPENWEATHERMAP_API_KEY</code></p> <p>required</p> <p>The OpenWeatherMap API key is required to fetch the weather information for the tracks. You can obtain a free API key by signing up at OpenWeatherMap.</p>"},{"location":"config/overview/","title":"Overview","text":"<p>Environment variables are used to configure the application. The following sections describe the available configuration options.</p> <ul> <li>Basic configuration</li> <li>Persistence</li> <li>Authentication</li> <li>Themes</li> </ul> <p>Features:</p> <ul> <li>Leaderboard</li> <li>Entrylist</li> <li>Balance of Performance</li> <li>Map</li> <li>Discord Integration</li> </ul>"},{"location":"config/overview/#basic-configuration","title":"Basic configuration","text":"<p><code>SPRING_PROFILES_ACTIVE</code></p> <p>optional</p> <p>To enable additional features, you have to add the corresponding feature profile to the <code>SPRING_PROFILES_ACTIVE</code> environment variable. If following profiles are set, when you do not override <code>SPRING_PROFILES_ACTIVE</code>:</p> <ul> <li><code>acc-entrylist,acc-bop</code>: Enable the Entrylist and Balance of Performance feature set.</li> </ul> <p><code>SIMDESK_COMMUNITY_NAME</code></p> <p>optional, default=SimDesk</p> <p>Set the community name for the main page. If not set, a generic name will be used.</p> <p><code>SIMDESK_IMPRESSUM_URL</code></p> <p>optional</p> <p>The URL to the impressum page. If not set, no impressum link will be shown.</p> <p><code>SIMDESK_PRIVACY_URL</code></p> <p>optional</p> <p>The URL to the privacy page. If not set, no privacy link will be shown.</p>"},{"location":"config/persistence/","title":"Persistence","text":"<p>This application can be configured to use either a SQLite (default) or PostgreSQL database. The database type will be detected via the <code>SIMDESK_DB_TYPE</code> environment variable. The available database types are<code>sqlite</code> and <code>postgres</code>. Take a look at the following sections to see how to configure the application to use the desired database.</p>"},{"location":"config/persistence/#sqlite","title":"SQLite","text":"<p>When using the SQLite database you only need to mount the <code>/app/data</code> directory inside the container to a persistent storage to keep the data between application restarts. You can use a Docker volume or a bind mount to achieve this.</p>"},{"location":"config/persistence/#environment-variables","title":"Environment variables","text":"<p><code>SIMDESK_DB_TYPE</code></p> <p>optional, default=sqlite</p> <p>Set the database type to <code>sqlite</code> to use the SQLite database. Since the default value is <code>sqlite</code>, you don't need to set this variable.</p>"},{"location":"config/persistence/#examples","title":"Examples","text":"<p>Docker \ud83d\udc33</p> <pre><code>docker run -d -p 8080:8080 -v \"simdesk-data:/app/data\" ghcr.io/fabieu/simdesk:latest\n</code></pre> <p>Docker Compose \ud83d\udc33</p> <pre><code># compose.yml (Docker Compose)\nservices:\n  app:\n    image: ghcr.io/fabieu/simdesk:latest\n    environment:\n      SIMDESK_DB_TYPE: sqlite # optional\n    volumes:\n      - simdesk-data:/app/data\n    ports:\n      - \"8080:8080\"\n    restart: unless-stopped\n</code></pre>"},{"location":"config/persistence/#postgresql","title":"PostgreSQL","text":"<p>When using the PostgreSQL database you need to set the connection details via the following environment variables. This application will create a new schema called <code>simdesk</code> in the specified database. This allows you to use an existing database without any conflicts.</p>"},{"location":"config/persistence/#environment-variables_1","title":"Environment variables","text":"<p><code>SIMDESK_DB_TYPE</code></p> <p>required</p> <p>Set the database type to <code>postgres</code> to use the PostgreSQL database.</p> <p><code>SIMDESK_DB_URL</code></p> <p>required</p> <p>The JDBC URL for the PostgreSQL database. The general form of the connection URL is: <code>jdbc:postgresql://[serverName[:portNumber]]/[databaseName][?property=value[;property=value]]</code></p> <ul> <li>jdbc:postgresql:// (Required) - Is known as the subprotocol and is constant.</li> <li>serverName (Required) - Is the address of the server to connect to. This address can be a DNS or IP address, or it   can be localhost or 127.0.0.1 for the local computer.</li> <li>portNumber (Optional) - Is the port to connect to on serverName. The default is 5432. If you're using the default   port, you don't have to specify the port, nor the preceding : in the URL.</li> <li>databaseName (Required) - Is the name of the database to connect to. The database name must be unique for each   database server.</li> <li>property (Optional) - Is one or more option connection properties. Properties can only be delimited by using the   semicolon (;), and they can't be duplicated.</li> </ul> <p><code>SIMDESK_DB_USERNAME</code></p> <p>required</p> <p>The username to connect to the PostgreSQL database.</p> <p><code>SIMDESK_DB_PASSWORD</code></p> <p>required</p> <p>The password to connect to the PostgreSQL database.</p>"},{"location":"config/persistence/#examples_1","title":"Examples","text":"<p>Docker Compose \ud83d\udc33</p> <pre><code># compose.yml (Docker Compose)\nservices:\n  app:\n    image: ghcr.io/fabieu/simdesk:latest\n    environment:\n      SIMDESK_DB_TYPE: postgres\n      SIMDESK_DB_URL: jdbc:postgresql://database:5432/simdesk\n      SIMDESK_DB_USERNAME: postgres\n      SIMDESK_DB_PASSWORD: development\n    ports:\n      - \"8080:8080\"\n    restart: unless-stopped\n  database:\n    image: postgres:16\n    shm_size: 128mb\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: development\n      POSTGRES_DB: simdesk\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - simdesk-db:/var/lib/postgresql/data\n    restart: unless-stopped\n</code></pre>"},{"location":"config/themes/","title":"Themes","text":"<p>SimDesk enables users to personalize the application's appearance by selecting from various themes. This section outlines the theme configuration process and gives an overview of the available choices.</p>"},{"location":"config/themes/#usage","title":"Usage","text":"<p>Set the <code>SIMDESK_THEME</code> environment variable to one of the available themes below. The application will apply the specified theme during startup. When no theme is specified, the standard theme will be used.</p>"},{"location":"config/themes/#available-themes","title":"Available Themes","text":"<p>The following themes are available in SimDesk:</p> <ul> <li>BLACK_AND_WHITE - A minimalistic black-and-white theme for a clean and simple look.</li> <li>DEFAULT - The standard theme with balanced blue colors for general use.</li> <li>MODERN_GREEN - A modern theme with green accents for a fresh appearance.</li> <li>RACING_RED - A bold theme with red highlights, ideal for racing enthusiasts.</li> <li>SIM2REAL - A theme specifically designed for the sim racing community \"Sim2Real\".</li> <li>PPR - A theme specifically designed for the sim racing team \"PixelPilots\".</li> </ul>"}]}